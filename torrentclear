#!/bin/bash
# Torrent Clear Script v1.0.1

# Script for Cron
# Clear torrents in Transmission-daemon, ratio >= 2
# And who have reached the limit of distribution activity: By default 7 days
# Default startup schedule: Every hour
#
# Tested on:
# Debian GNU/Linux 9.4 (stretch)
# transmission-daemon 2.92 (14714)
#
# Cron setup:
# cd /etc/cron.hourly/
# put a torrentclear file in this folder and give execution rights
# chmod +x torrentclear
#
# Create logfile dir:
# mkdir /var/log/transmission
#

# INIT
SETTINGFILE="/etc/transmission-daemon/settings.json"
LOGFILE="/var/log/transmission/torrentclear.log"
TRANSIP="127.0.0.1"
TRANSPORT="9091"
TR_LOGIN="user"
TR_PASSWORD="123456789"
TR_CONNECT="transmission-remote $TRANSIP:$TRANSPORT -n $TR_LOGIN:$TR_PASSWORD"
NOWDATE=$(date +%s) # Current date in seconds | It is advisable that NTP synchronization be configured on the OS
LIMITTIME="604800" # After how many days (7 days = 604800 seconds) should the torrent be deleted, even if it has not reached the distribution coefficient = 2
regex_file="\.(mkv|avi|mp4|ts|mov)$"

# FUNCTIONS
function logging
{
	# $1 - Text
	if [ -e $LOGFILE ]; then
		echo "`date '+%d.%m.%Y %H:%M:%S'`    $1" >> $LOGFILE
	else
		touch $LOGFILE
		echo "`date '+%d.%m.%Y %H:%M:%S'`    $1" >> $LOGFILE
	fi
}
function torrentinfo
{
	# $1 - TORRENTID
	logging "ID:	$1"
	local TR_NAME=$($TR_CONNECT -t$1 -i | grep 'Name:' | grep -Eo '\:\s(.*+)' | sed -r 's/^\:\s//')
	logging "TR_NAME:	$TR_NAME"
	local TR_DATEDONE=$($TR_CONNECT -t$1 -i | grep 'Date finished:' | grep -Eo '\:\s{4}.*+' | sed -r 's/^\:\s{4}//')
	local TR_DATEDONE=$(date -d "$TR_DATEDONE" +%s)
	logging "TR_DATEDONE:	$TR_DATEDONE"
	local PERCENT=$($TR_CONNECT -t$1 -i | grep 'Percent Done:' | sed -r 's/(\s|[a-zA-Z]|\:)//g' | sed -r 's/\%//g')
	logging "PERCENT:	$PERCENT%"
	local RATIO=$($TR_CONNECT -t$1 -i | grep 'Ratio:' | sed -r 's/(\s|[a-zA-Z]|\:)//g')
	logging "RATIO:		$RATIO"
	local STATE=$($TR_CONNECT -t$1 -i | grep 'State:' | sed -r 's/\s(.*)\:\s//g')
	logging "STATE:		$STATE"
	local DATEDIFF=$(($NOWDATE - $TR_DATEDONE))
	logging "DATEDIFF:	$DATEDIFF"
}
function torrentremove
{
	# $1 - TORRENTID
	# $2 - (1 - RATIO | 2 - DATETIME)
	
	# Stop and remove torrent from Transmission
	local TR_NAME=$($TR_CONNECT -t$1 -i | grep 'Name:' | grep -Eo '\:\s(.*+)' | sed -r 's/^\:\s//')
	$TR_CONNECT -t$1 -S
	
	
		
		logging "Remove torrent and delete"
		local REMOVE=$($TR_CONNECT -t$1 --remove-and-delete | grep -Eo '\"([a-z]+)\"' | sed -r 's/\"//g')
	fi

	# Delete check
	if [[ $2 == 1 ]]; then
		# RATIO
		if [[ $REMOVE != "success" ]]; then
			# Delete is failed
			logging "ERR: Failed to stop and remove torrent $TR_NAME by ratio limit"
		else
			# Delete is successful
			logging "Stopping and deleting a torrent $TR_NAME by ratio limit completed successfully"
		fi
	fi
	if [[ $2 == 2 ]]; then
		# DATETIME
		if [[ $REMOVE != "success" ]]; then
			# Delete is failed
			logging "ERR: Failed to stop and remove torrent $TR_NAME by datetime limit"
		else
			# Delete is successful
			logging "Stopping and deleting a torrent $TR_NAME by datetime limit completed successfully"
		fi
	fi
}

# ACTION
# Get Ratio Limit
RATIOENABLE=$(cat $SETTINGFILE | grep '\"ratio-limit-enabled\":' | grep -Eo '(true|false)' | sed -e 's/true/1/' -e 's/false/0/')

# Check if transmission-daemon is running
# If not, then immediately end the script
TR_STATUS=$(systemctl status transmission-daemon | grep 'Active' | grep -Eo '\([a-z]+\)' | sed -r 's/(\(|\))//g')
if [[ $TR_STATUS != "running" ]]; then
	logging "#=====================================================================================#"
	logging "ERR: The transmission-daemon service is not running! Further processing is not performed. Exit!"
	exit 0;
fi

# If the service is running, we continue.
# Select all torrents with 100% completion and ratio = 2
# Get all torrent IDs.
# We process them in a cycle
for TORRENTID in $($TR_CONNECT -l | grep -Eo '^ *([0-9]+)' | sed -r 's/[^0-9]//g'); do
	# GET TORRENT INFO
	# We get the name of the processed torrent for logs
	TR_NAME=$($TR_CONNECT -t$TORRENTID -i | grep 'Name:' | grep -Eo '\:\s(.*+)' | sed -r 's/^\:\s//')
	# Torrent download end date in format: Wed Apr 18 13:00:35 2018
	TR_DATEDONE=$($TR_CONNECT -t$TORRENTID -i | grep 'Date finished:' | grep -Eo '\:\s{4}.*+' | sed -r 's/^\:\s{4}//')
	TR_DATEDONE=$(date -d "$TR_DATEDONE" +%s)
	# We get the percentage of download torrent (36.6 | 100 | etc)
	PERCENT=$($TR_CONNECT -t$TORRENTID -i | grep 'Percent Done:' | sed -r 's/(\s|[a-zA-Z]|\:)//g' | sed -r 's/\%//g')
	# We get the torrent distribution coefficient (0.3 | 1.0 | etc)
	RATIO=$($TR_CONNECT -t$TORRENTID -i | grep 'Ratio:' | sed -r 's/(\s|[a-zA-Z]|\:)//g')
	STATE=$($TR_CONNECT -t$TORRENTID -i | grep 'State:' | sed -r 's/\s(.*)\:\s//g')
	DATEDIFF=$(($NOWDATE - $TR_DATEDONE))

	# Verification of conditions
	# Torrent complete?
	logging "#=====================================================================================#"
	logging "Check torrent $TR_NAME:: PERCENT: $PERCENT; RATIO: $RATIO; STATE: $STATE; DATEDIFF: $DATEDIFF"
	if python -c "exit(0 if $PERCENT == 100 else 1)"; then
		# Check ratio-limit-enabled
		if [[ $RATIOENABLE == 1 ]]; then
			LIMRATIO=$(cat $SETTINGFILE | grep '\"ratio-limit\":' | grep -Eo '([0-9\.])')
			# Is the ratio greater than or equal to 2?
			if python -c "exit(0 if $RATIO >= $LIMRATIO else 1)"; then
				torrentinfo $TORRENTID
				torrentremove $TORRENTID 1
			fi
		fi
		# Date difference greater than or equal to LIMITTIME
		if [ $DATEDIFF -ge $LIMITTIME ]; then
			torrentinfo $TORRENTID
			torrentremove $TORRENTID 2
		fi
	fi
done
logging "//END"
exit 0;
